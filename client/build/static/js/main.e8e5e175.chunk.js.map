{"version":3,"sources":["App.jsx","index.js"],"names":["socket","io","transports","App","useState","userName","setUserName","userNames","setUserNames","userNameConfirmed","setUserNameConfirmed","passedUserNameLenght","setPassedUserNameLenght","messageInputValue","setMessageInputValue","messages","setMessages","chatBox","useRef","on","message","current","messageInput","nextElementSibling","lastMessage","lastElementChild","removeAttribute","scrollIntoView","behavior","clients","clientArray","JSON","parse","name","filter","obj","handleUserNameInput","e","str","target","value","length","handleSubmitUserInput","key","submitUserInfo","emit","handleMessageInput","handleMessage","currentUser","dataset","user","setAttribute","className","src","alt","_","map","index","ref","msgClass","dateTime","time","type","data-user","onKeyPress","onChange","placeholder","htmlFor","id","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e8e5e175.chunk.js","sourcesContent":["import React, { useState, useRef, Fragment } from \"react\";\nimport io from \"socket.io-client\";\nimport _ from \"lodash\";\nimport \"./App.css\";\n\nconst isDevelopment = process.env.NODE_ENV === \"development\";\nconst socketPort = isDevelopment ? 3001 : 80;\nconst socket = io(`http://localhost:${socketPort}`, {\n  transports: [\"websocket\", \"polling\", \"flashsocket\"],\n});\n\nconst App = () => {\n  const [userName, setUserName] = useState(\"\");\n  const [userNames, setUserNames] = useState([]);\n  const [userNameConfirmed, setUserNameConfirmed] = useState(false);\n  const [passedUserNameLenght, setPassedUserNameLenght] = useState(false);\n  const [messageInputValue, setMessageInputValue] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const chatBox = useRef(null);\n\n  socket.on(\"chat message\", (message) => {\n    setMessages([...messages, message]);\n    if (chatBox.current) {\n      const messageInput = chatBox.current.nextElementSibling;\n      const lastMessage = chatBox.current.lastElementChild;\n      messageInput.removeAttribute(\"disabled\");\n      lastMessage.scrollIntoView({\n        behavior: \"smooth\",\n      });\n    }\n  });\n\n  socket.on(\"user name\", (clients) => {\n    const clientArray = JSON.parse(clients);\n    setUserNames(clientArray);\n  });\n\n  socket.on(\"disconnect\", (name) => {\n    setUserNames(userNames.filter((obj) => obj.name !== name));\n  });\n\n  const handleUserNameInput = (e) => {\n    const str = e.target.value;\n    setUserName(str);\n    if (str.length > 0) {\n      setPassedUserNameLenght(true);\n    } else {\n      setPassedUserNameLenght(false);\n    }\n  };\n\n  const handleSubmitUserInput = (e) => {\n    if (e.key === \"Enter\") {\n      submitUserInfo();\n    }\n  };\n\n  const submitUserInfo = () => {\n    if (userName && userName.length > 0) {\n      socket.emit(\"user name\", userName);\n      setUserNameConfirmed(true);\n    }\n  };\n\n  const handleMessageInput = (e) => {\n    setMessageInputValue(e.target.value);\n  };\n\n  const handleMessage = (e) => {\n    if (e.key === \"Enter\") {\n      const currentUser = e.target.dataset.user;\n      if (messageInputValue.length > 0) {\n        socket.emit(\"chat message\", { currentUser, messageInputValue });\n        setMessageInputValue(\"\");\n      }\n      if (chatBox.current) {\n        const messageInput = chatBox.current.nextElementSibling;\n        messageInput.setAttribute(\"disabled\", \"\");\n      }\n    }\n  };\n\n  const renderContent = () => {\n    if (userNameConfirmed) {\n      return (\n        <section className=\"main-content\">\n          <div className=\"chatbox\" ref={chatBox}>\n            {_.map(messages, (obj, index) => {\n              const isMine = obj.currentUser === userName;\n              const msgClass = isMine ? \"mine\" : \"other\";\n              return (\n                <article key={index} className={`message ${msgClass}`}>\n                  <header>\n                    <span>{obj.currentUser}</span>\n                    <time dateTime={obj.time}>{obj.time}</time>\n                  </header>\n                  <p>{obj.messageInputValue}</p>\n                </article>\n              );\n            })}\n          </div>\n          <input\n            type=\"text\"\n            data-user={userName}\n            onKeyPress={handleMessage}\n            onChange={handleMessageInput}\n            placeholder=\"Enter a message...\"\n            value={messageInputValue}\n          />\n        </section>\n      );\n    } else {\n      return (\n        <section className=\"overlay\">\n          <label htmlFor=\"nick-name\">Please enter a username:</label>\n          <input\n            type=\"text\"\n            id=\"nick-name\"\n            placeholder=\"Your username...\"\n            onKeyPress={handleSubmitUserInput}\n            onChange={handleUserNameInput}\n            value={userName}\n          />\n          <button\n            className={passedUserNameLenght ? \"\" : \"disabled\"}\n            onClick={submitUserInfo}\n          >\n            Confirm\n          </button>\n        </section>\n      );\n    }\n  };\n\n  return (\n    <Fragment>\n      <header className=\"main-header\">\n        <figure className=\"main-header__logo\">\n          <img src=\"https://picsum.photos/100\" alt=\"logo\" />\n          <figcaption>ChatApp</figcaption>\n        </figure>\n      </header>\n      <aside className=\"sidebar\">\n        <h1>Connected Clients: {userNames.length}</h1>\n        {_.map(userNames, (obj, index) => {\n          return (\n            <div key={index} className=\"user-indicator\">\n              <div className=\"user-status\" />\n              <span>{obj.name}</span>\n            </div>\n          );\n        })}\n      </aside>\n      {renderContent()}\n    </Fragment>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}